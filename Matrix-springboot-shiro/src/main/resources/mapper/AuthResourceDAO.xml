<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.tustcs.shiro.dao.AuthResourceDAO">
    <resultMap id="BaseResultMap" type="org.tustcs.shiro.entity.AuthResource">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="code" jdbcType="VARCHAR" property="code"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="parent_id" jdbcType="INTEGER" property="parentId"/>
        <result column="uri" jdbcType="VARCHAR" property="uri"/>
        <result column="type" jdbcType="SMALLINT" property="type"/>
        <result column="method" jdbcType="VARCHAR" property="method"/>
        <result column="icon" jdbcType="VARCHAR" property="icon"/>
        <result column="status" jdbcType="SMALLINT" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, code, `name`, parent_id, uri, `type`, `method`, icon, `status`, create_time, 
    update_time
  </sql>
    <select id="selectByExample" parameterType="org.tustcs.shiro.entity.AuthResourceExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from auth_resource
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth_resource
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from auth_resource
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="org.tustcs.shiro.entity.AuthResourceExample">
        delete from auth_resource
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="org.tustcs.shiro.entity.AuthResource">
    insert into auth_resource (id, code, `name`, 
      parent_id, uri, `type`, 
      `method`, icon, `status`, 
      create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{parentId,jdbcType=INTEGER}, #{uri,jdbcType=VARCHAR}, #{type,jdbcType=SMALLINT}, 
      #{method,jdbcType=VARCHAR}, #{icon,jdbcType=VARCHAR}, #{status,jdbcType=SMALLINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="org.tustcs.shiro.entity.AuthResource">
        insert into auth_resource
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="uri != null">
                uri,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="method != null">
                `method`,
            </if>
            <if test="icon != null">
                icon,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="uri != null">
                #{uri,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=SMALLINT},
            </if>
            <if test="method != null">
                #{method,jdbcType=VARCHAR},
            </if>
            <if test="icon != null">
                #{icon,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=SMALLINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="org.tustcs.shiro.entity.AuthResourceExample" resultType="java.lang.Long">
        select count(*) from auth_resource
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update auth_resource
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.code != null">
                code = #{record.code,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                `name` = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=INTEGER},
            </if>
            <if test="record.uri != null">
                uri = #{record.uri,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                `type` = #{record.type,jdbcType=SMALLINT},
            </if>
            <if test="record.method != null">
                `method` = #{record.method,jdbcType=VARCHAR},
            </if>
            <if test="record.icon != null">
                icon = #{record.icon,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                `status` = #{record.status,jdbcType=SMALLINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update auth_resource
        set id = #{record.id,jdbcType=INTEGER},
        code = #{record.code,jdbcType=VARCHAR},
        `name` = #{record.name,jdbcType=VARCHAR},
        parent_id = #{record.parentId,jdbcType=INTEGER},
        uri = #{record.uri,jdbcType=VARCHAR},
        `type` = #{record.type,jdbcType=SMALLINT},
        `method` = #{record.method,jdbcType=VARCHAR},
        icon = #{record.icon,jdbcType=VARCHAR},
        `status` = #{record.status,jdbcType=SMALLINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="org.tustcs.shiro.entity.AuthResource">
        update auth_resource
        <set>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=INTEGER},
            </if>
            <if test="uri != null">
                uri = #{uri,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=SMALLINT},
            </if>
            <if test="method != null">
                `method` = #{method,jdbcType=VARCHAR},
            </if>
            <if test="icon != null">
                icon = #{icon,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=SMALLINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="org.tustcs.shiro.entity.AuthResource">
    update auth_resource
    set code = #{code,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER},
      uri = #{uri,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=SMALLINT},
      `method` = #{method,jdbcType=VARCHAR},
      icon = #{icon,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=SMALLINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="selectResources" resultType="java.lang.String">
    select GROUP_CONCAT(distinct re.uri) from auth_user as u
    join auth_user_role as aur on aur.user_id = u.uid
    join auth_role_resource as arr on arr.role_id = aur.role_id
    join auth_resource as re on re.id = arr.resource_id and type = #{type}
    where u.uid = #{uid}
  </select>
    <select id="selectUrlAndRole" resultType="org.tustcs.shiro.pojo.rules.JwtRule">
      select ar.uri as url, GROUP_CONCAT(rol.code) as rules from auth_resource as ar
      left join auth_role_resource arr on ar.id = arr.resource_id
      left join auth_role rol on arr.role_id = rol.id
      where ar.type = 2 and ar.status = 1
      group by
      ar.uri, ar.type
    </select>
    <select id="selectAvailMenus" resultType="java.lang.String">
      select GROUP_CONCAT(ar.code) from auth_resource as ar
      join auth_role_resource arr on arr.resource_id = ar.id
      where ar.type = 1 and arr.role_id in
      (select aur.role_id from auth_user_role aur where user_id = #{uid})
  </select>
    <select id="selectApiByRoleId" resultType="org.tustcs.shiro.entity.AuthResource">
        select
        ar.*
        from auth_resource as ar
        where ar.type = 2 and id in
        (select resource_id from auth_role_resource where role_id = #{roleId})
    </select>
    <select id="selectUnauthResource" resultType="org.tustcs.shiro.entity.AuthResource">
        select
        ar.*
        from auth_resource as ar
        where id not in
        (select resource_id from auth_role_resource where role_id = #{roleId})
    </select>

</mapper>
